{"version":3,"sources":["redux/contacts/actions.js","redux/contacts/reducer.js","redux/store.js","components/ContactsForm/ContactsForm.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","App/App.js","index.js"],"names":["addContact","createAction","name","number","payload","id","shortid","generate","deleteContact","filterContacts","localStorageContacts","JSON","parse","localStorage","getItem","contacts","createReducer","state","inContacts","setItem","stringify","removedFromContacts","filter","combineReducers","store","configureStore","reducer","contactsReducer","ContactsForm","dispatch","useDispatch","useSelector","useState","setName","setNumber","handleChange","e","target","value","console","log","currentTarget","alreadyExistsContact","some","contact","toLowerCase","reset","onSubmit","preventDefault","alert","onAddContact","htmlFor","type","onChange","pattern","title","required","onClick","ContactList","finishFilterContacts","includes","filteredContacts","map","onDeleteContact","prototype","PropTypes","string","isRequired","handleDeleteContact","func","array","Filter","defaultProps","onChangeFilter","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3df7dc4e.chunk.js","sourcesContent":["import { createAction } from '@reduxjs/toolkit';\nimport shortid from 'shortid';\n\n// export const addContact = ({ name, number, id }) => ({\n//   type: 'phonebook/AddContact',\n//   payload: { name, number, id },\n// });\n\n// export const deleteContact = id => ({\n//   type: 'phonebook/DeleteContact',\n//   payload: { id },\n// });\n\n// export const filterContact = name => ({\n//   type: 'phonebook/FilterContact',\n//   payload: { name },\n// });\n\nconst addContact = createAction('contacts/AddContact', (name, number) => ({\n  payload: {\n    id: shortid.generate(),\n    name,\n    number,\n  },\n}));\nconst deleteContact = createAction('contacts/DeleteContact');\nconst filterContacts = createAction('contacts/FilterContact');\n\nexport { addContact, deleteContact, filterContacts };\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport { addContact, deleteContact, filterContacts } from './actions';\n\nconst localStorageContacts = JSON.parse(localStorage.getItem('contacts'));\n\nconst contacts = createReducer(\n  localStorageContacts ?? [\n    { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n    { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n    { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n    { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n  ],\n  {\n    [addContact]: (state, { payload }) => {\n      const inContacts = [payload, ...state];\n      localStorage.setItem('contacts', JSON.stringify(inContacts));\n      return inContacts;\n    },\n\n    [deleteContact]: (state, { payload }) => {\n      const removedFromContacts = state.filter(({ id }) => id !== payload);\n      localStorage.setItem('contacts', JSON.stringify(removedFromContacts));\n      return removedFromContacts;\n    },\n  },\n);\nconst filter = createReducer('', {\n  [filterContacts]: (state, { payload }) => payload,\n});\n\nexport default combineReducers({ contacts, filter });\n","// import { createStore, applyMiddleware } from 'redux';\n// import { composeWithDevTools } from 'redux-devtools-extension';\nimport { configureStore } from '@reduxjs/toolkit';\nimport contactsReducer from './contacts/reducer';\n\n// const store = createStore(\n//   reducer,\n//   composeWithDevTools(),\n// applyMiddleware([])\n// other store enhancers if any\n// );\nconst store = configureStore({ reducer: contactsReducer });\n\nexport default store;\n","import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { addContact } from '../../redux/contacts/actions';\n\nfunction ContactsForm() {\n  const dispatch = useDispatch();\n  const contacts = useSelector(state => state.contacts);\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n\n    console.log('VALUE:', e.currentTarget);\n    console.log('NAME:', [name]);\n  };\n\n  const onAddContact = (name, number) => {\n    dispatch(addContact(name, number));\n  };\n\n  const alreadyExistsContact = contacts.some(\n    contact => contact.name.toLowerCase() === name.toLowerCase(),\n  );\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (alreadyExistsContact) {\n      alert(`${name} is already in contacts.`);\n      return;\n    }\n    onAddContact(name, number);\n\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <div>\n      <form\n        onSubmit={handleSubmit}\n        //   onSubmit={(e) => {\n        //     e.preventDefault();\n        //     console.log(e.currentTarget);\n        //   }}\n      >\n        <label htmlFor=\"name\">\n          Name\n          <input\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            onChange={handleChange}\n            id={name}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n          />\n        </label>\n        <label htmlFor=\"number\">\n          Number\n          <input\n            type=\"tel\"\n            name=\"number\"\n            value={number}\n            onChange={handleChange}\n            id={number}\n            // pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            // title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n          />\n        </label>\n        <button\n          onClick={() => {\n            console.log('add contakt');\n          }}\n          type=\"submit\"\n        >\n          add contact\n        </button>\n      </form>\n    </div>\n  );\n}\n\nexport default ContactsForm;\n\n/////////CLASS///////////////////////////////////////////////////////\n// import React, { Component } from 'react';\n\n// class ContactsForm extends Component {\n//   state = {\n//     name: '',\n//     number: '',\n//   };\n\n//   handleChange = e => {\n//     const { name, value } = e.currentTarget;\n//     this.setState({ [name]: value });\n//     // console.log(\"VALUE:\", e.currentTarget);\n//     // console.log(\"NAME:\", [name]);\n//   };\n\n//   handleSubmit = e => {\n//     const { name, number } = this.state;\n//     e.preventDefault();\n//     this.props.onSubmit(name, number);\n\n//     this.reset();\n//   };\n\n//   reset = () => {\n//     this.setState({ name: '', number: '' });\n//   };\n\n//   render() {\n//     return (\n//       <div>\n//         <form\n//           onSubmit={this.handleSubmit}\n//           //   onSubmit={(e) => {\n//           //     e.preventDefault();\n//           //     console.log(e.currentTarget);\n//           //   }}\n//         >\n//           <label>\n//             Name\n//             <input\n//               type=\"text\"\n//               name=\"name\"\n//               value={this.state.name}\n//               onChange={this.handleChange}\n//               id={this.state.name}\n//               pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//               title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n//               required\n//             />\n//           </label>\n//           <label>\n//             Number\n//             <input\n//               type=\"tel\"\n//               name=\"number\"\n//               value={this.state.number}\n//               onChange={this.handleChange}\n//               id={this.state.number}\n//               pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n//               title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n//               required\n//             />\n//           </label>\n//           <button\n//             onClick={() => {\n//               console.log('add contakt');\n//             }}\n//             type=\"submit\"\n//           >\n//             add contact\n//           </button>\n//         </form>\n//       </div>\n//     );\n//   }\n// }\n\n// export default ContactsForm;\n","import { useDispatch, useSelector } from 'react-redux';\nimport React from 'react';\nimport PropTypes from 'prop-types';\n//import { connect } from 'react-redux';\n\nimport { deleteContact } from '../../redux/contacts/actions';\n\nconst ContactList = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(state => state.contacts);\n  console.log(contacts);\n  const filter = useSelector(state => state.filter);\n  const onDeleteContact = id => {\n    dispatch(deleteContact(id));\n  };\n\n  const filteredContacts = (contacts, filter) =>\n    contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase()),\n    );\n\n  const finishFilterContacts = filteredContacts(contacts, filter);\n  //console.log('ОТФИЛЬТРОВАННЫЕ КОНТАКТЫ', finishFilterContacts);\n  return (\n    <ul>\n      {finishFilterContacts.map(({ id, name, number }) => (\n        <li key={id}>\n          <p>{name}</p>\n          <p>{number}</p>\n          <button type=\"button\" onClick={() => onDeleteContact(id)}>\n            delete contact\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nContactList.prototype = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  handleDeleteContact: PropTypes.func.isRequired,\n  contacts: PropTypes.array.isRequired,\n};\nexport default ContactList;\n","import { useSelector, useDispatch } from 'react-redux';\nimport React from 'react';\nimport PropTypes from 'prop-types';\n//import { connect } from 'react-redux';\nimport { filterContacts } from '../../redux/contacts/actions';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(state => state.filter);\n\n  const findContact = name => {\n    dispatch(filterContacts(name.toLowerCase()));\n  };\n\n  const onChangeFilter = e => {\n    findContact(e.target.value);\n  };\n  return (\n    <label>\n      Find contacts by name\n      <input\n        type=\"text\"\n        value={filter}\n        onChange={onChangeFilter}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n        required\n      />\n    </label>\n  );\n};\n\nFilter.defaultProps = {\n  value: '',\n};\n\nFilter.prototype = {\n  value: PropTypes.string.isRequired,\n  onChangeFilter: PropTypes.func.isRequired,\n};\n\nexport default Filter;\n","import React, { Fragment } from 'react';\n\nimport './App.css';\n\nimport ContactsForm from '../components/ContactsForm';\nimport ContactList from '../components/ContactList';\nimport Filter from '../components/Filter';\n\nfunction App() {\n  return (\n    <Fragment>\n      <div>\n        <h1>Phonebook</h1>\n        <ContactsForm />\n\n        <h2>Contacts</h2>\n        <Filter />\n\n        <ContactList />\n      </div>\n    </Fragment>\n  );\n}\n\n// const mapStateToProps = state => {\n//   return {\n//     value: state.contacts.itemsValue,\n//   };\n// };\n\n// const mapDispatchToProps = dispatch => {\n//   return {\n//     handleSubmit: () => dispatch(actions.addContact()),\n//     handleRemoveContact: () => dispatch(actions.deleteContact()),\n//     //onChangeFilter: () => dispatch(),\n//     onFilterName: () => dispatch(actions.filterContact()),\n//   };\n// };\n// export default connect(mapStateToProps, mapDispatchToProps)(App);\nexport default App;\n","import store from './redux/store';\nimport { Provider } from 'react-redux';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nconsole.log('store', store);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}